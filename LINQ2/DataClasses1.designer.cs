#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LINQ2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EscDirectaDB")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertUniversidad(Universidad instance);
    partial void UpdateUniversidad(Universidad instance);
    partial void DeleteUniversidad(Universidad instance);
    partial void InsertEstudiante(Estudiante instance);
    partial void UpdateEstudiante(Estudiante instance);
    partial void DeleteEstudiante(Estudiante instance);
    partial void InsertMateria(Materia instance);
    partial void UpdateMateria(Materia instance);
    partial void DeleteMateria(Materia instance);
    partial void InsertMateriaEstudiante(MateriaEstudiante instance);
    partial void UpdateMateriaEstudiante(MateriaEstudiante instance);
    partial void DeleteMateriaEstudiante(MateriaEstudiante instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::LINQ2.Properties.Settings.Default.EscDirectaDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Universidad> Universidad
		{
			get
			{
				return this.GetTable<Universidad>();
			}
		}
		
		public System.Data.Linq.Table<Estudiante> Estudiante
		{
			get
			{
				return this.GetTable<Estudiante>();
			}
		}
		
		public System.Data.Linq.Table<Materia> Materia
		{
			get
			{
				return this.GetTable<Materia>();
			}
		}
		
		public System.Data.Linq.Table<MateriaEstudiante> MateriaEstudiante
		{
			get
			{
				return this.GetTable<MateriaEstudiante>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Universidad")]
	public partial class Universidad : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nombre;
		
		private EntitySet<Estudiante> _Estudiante;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public Universidad()
		{
			this._Estudiante = new EntitySet<Estudiante>(new Action<Estudiante>(this.attach_Estudiante), new Action<Estudiante>(this.detach_Estudiante));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Universidad_Estudiante", Storage="_Estudiante", ThisKey="Id", OtherKey="UniversidadId")]
		public EntitySet<Estudiante> Estudiante
		{
			get
			{
				return this._Estudiante;
			}
			set
			{
				this._Estudiante.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Estudiante(Estudiante entity)
		{
			this.SendPropertyChanging();
			entity.Universidad = this;
		}
		
		private void detach_Estudiante(Estudiante entity)
		{
			this.SendPropertyChanging();
			entity.Universidad = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Estudiante")]
	public partial class Estudiante : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nombre;
		
		private string _Genero;
		
		private int _UniversidadId;
		
		private EntitySet<MateriaEstudiante> _MateriaEstudiante;
		
		private EntityRef<Universidad> _Universidad;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnGeneroChanging(string value);
    partial void OnGeneroChanged();
    partial void OnUniversidadIdChanging(int value);
    partial void OnUniversidadIdChanged();
    #endregion
		
		public Estudiante()
		{
			this._MateriaEstudiante = new EntitySet<MateriaEstudiante>(new Action<MateriaEstudiante>(this.attach_MateriaEstudiante), new Action<MateriaEstudiante>(this.detach_MateriaEstudiante));
			this._Universidad = default(EntityRef<Universidad>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Genero", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Genero
		{
			get
			{
				return this._Genero;
			}
			set
			{
				if ((this._Genero != value))
				{
					this.OnGeneroChanging(value);
					this.SendPropertyChanging();
					this._Genero = value;
					this.SendPropertyChanged("Genero");
					this.OnGeneroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniversidadId", DbType="Int NOT NULL")]
		public int UniversidadId
		{
			get
			{
				return this._UniversidadId;
			}
			set
			{
				if ((this._UniversidadId != value))
				{
					if (this._Universidad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUniversidadIdChanging(value);
					this.SendPropertyChanging();
					this._UniversidadId = value;
					this.SendPropertyChanged("UniversidadId");
					this.OnUniversidadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Estudiante_MateriaEstudiante", Storage="_MateriaEstudiante", ThisKey="Id", OtherKey="EstudianteId")]
		public EntitySet<MateriaEstudiante> MateriaEstudiante
		{
			get
			{
				return this._MateriaEstudiante;
			}
			set
			{
				this._MateriaEstudiante.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Universidad_Estudiante", Storage="_Universidad", ThisKey="UniversidadId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Universidad Universidad
		{
			get
			{
				return this._Universidad.Entity;
			}
			set
			{
				Universidad previousValue = this._Universidad.Entity;
				if (((previousValue != value) 
							|| (this._Universidad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Universidad.Entity = null;
						previousValue.Estudiante.Remove(this);
					}
					this._Universidad.Entity = value;
					if ((value != null))
					{
						value.Estudiante.Add(this);
						this._UniversidadId = value.Id;
					}
					else
					{
						this._UniversidadId = default(int);
					}
					this.SendPropertyChanged("Universidad");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MateriaEstudiante(MateriaEstudiante entity)
		{
			this.SendPropertyChanging();
			entity.Estudiante = this;
		}
		
		private void detach_MateriaEstudiante(MateriaEstudiante entity)
		{
			this.SendPropertyChanging();
			entity.Estudiante = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Materia")]
	public partial class Materia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nombre;
		
		private EntitySet<MateriaEstudiante> _MateriaEstudiante;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public Materia()
		{
			this._MateriaEstudiante = new EntitySet<MateriaEstudiante>(new Action<MateriaEstudiante>(this.attach_MateriaEstudiante), new Action<MateriaEstudiante>(this.detach_MateriaEstudiante));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Materia_MateriaEstudiante", Storage="_MateriaEstudiante", ThisKey="Id", OtherKey="MateriaId")]
		public EntitySet<MateriaEstudiante> MateriaEstudiante
		{
			get
			{
				return this._MateriaEstudiante;
			}
			set
			{
				this._MateriaEstudiante.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MateriaEstudiante(MateriaEstudiante entity)
		{
			this.SendPropertyChanging();
			entity.Materia = this;
		}
		
		private void detach_MateriaEstudiante(MateriaEstudiante entity)
		{
			this.SendPropertyChanging();
			entity.Materia = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MateriaEstudiante")]
	public partial class MateriaEstudiante : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _EstudianteId;
		
		private int _MateriaId;
		
		private EntityRef<Estudiante> _Estudiante;
		
		private EntityRef<Materia> _Materia;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEstudianteIdChanging(int value);
    partial void OnEstudianteIdChanged();
    partial void OnMateriaIdChanging(int value);
    partial void OnMateriaIdChanged();
    #endregion
		
		public MateriaEstudiante()
		{
			this._Estudiante = default(EntityRef<Estudiante>);
			this._Materia = default(EntityRef<Materia>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstudianteId", DbType="Int NOT NULL")]
		public int EstudianteId
		{
			get
			{
				return this._EstudianteId;
			}
			set
			{
				if ((this._EstudianteId != value))
				{
					if (this._Estudiante.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEstudianteIdChanging(value);
					this.SendPropertyChanging();
					this._EstudianteId = value;
					this.SendPropertyChanged("EstudianteId");
					this.OnEstudianteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MateriaId", DbType="Int NOT NULL")]
		public int MateriaId
		{
			get
			{
				return this._MateriaId;
			}
			set
			{
				if ((this._MateriaId != value))
				{
					if (this._Materia.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMateriaIdChanging(value);
					this.SendPropertyChanging();
					this._MateriaId = value;
					this.SendPropertyChanged("MateriaId");
					this.OnMateriaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Estudiante_MateriaEstudiante", Storage="_Estudiante", ThisKey="EstudianteId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Estudiante Estudiante
		{
			get
			{
				return this._Estudiante.Entity;
			}
			set
			{
				Estudiante previousValue = this._Estudiante.Entity;
				if (((previousValue != value) 
							|| (this._Estudiante.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Estudiante.Entity = null;
						previousValue.MateriaEstudiante.Remove(this);
					}
					this._Estudiante.Entity = value;
					if ((value != null))
					{
						value.MateriaEstudiante.Add(this);
						this._EstudianteId = value.Id;
					}
					else
					{
						this._EstudianteId = default(int);
					}
					this.SendPropertyChanged("Estudiante");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Materia_MateriaEstudiante", Storage="_Materia", ThisKey="MateriaId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Materia Materia
		{
			get
			{
				return this._Materia.Entity;
			}
			set
			{
				Materia previousValue = this._Materia.Entity;
				if (((previousValue != value) 
							|| (this._Materia.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Materia.Entity = null;
						previousValue.MateriaEstudiante.Remove(this);
					}
					this._Materia.Entity = value;
					if ((value != null))
					{
						value.MateriaEstudiante.Add(this);
						this._MateriaId = value.Id;
					}
					else
					{
						this._MateriaId = default(int);
					}
					this.SendPropertyChanged("Materia");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
